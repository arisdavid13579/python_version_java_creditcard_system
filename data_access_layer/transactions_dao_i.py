from abc import ABC, abstractmethod
from typing import List
from transfer_objects.transaction import Transaction
from transfer_objects.transaction_list import TransactionList


class TransactionsDaoI(ABC):
    """Defines abstractly the methods needed to handle transaction data.

     :Authors: Aris Fernandez
     """
    @abstractmethod
    def get_transactions_by_zipcode(self, zipcode: str, during_month: int,
                                    during_year: int) -> TransactionList:  # NoResultsFoundException
        """Generates a list of transactions in a given zip code during a given month and year.


        Parameters
        ----------
        zipcode: str
            The postal code of the area for which the transaction list is to be obtained.
        during_month: int
            The month during which transactions occur.
        during_year: int
            The year during which the transactions occur.

        Returns
        -------
        TransactionList
            A TransactionList object which contains all the transactions found with the given information.

        Raises
        ------
        NoResultsFoundException
            If no results are found with the given information.
         """

    @abstractmethod
    def get_transactions_by_state(self, state: str) -> Transaction:  # NoResultsFoundException

        """Finds the count of transactions of occurring in a given State as well as the
              total amount of money generated by transactions in that location.


             Parameters
             ----------
             state: str
                 The state in which the transactions occur.

             Returns
             -------
             Transaction
                 A transaction object with only the value and count fields set.
                 In this case, value is the sum of the value of all relevant transaction and the count is the number of
                 relevant transactions. All other fields are set to null or not initialized.

             Raises
             ------
             NoResultsFoundException
                 If no transactions with the given information are found in the database.
              """

    @abstractmethod
    def get_transactions_by_type(self, tran_type: str) -> Transaction:  # NoResultsFoundException
        """Finds the count of transactions of a given type as well as the total amount
              of money generated by that type of transaction.


             Parameters
             ----------
             tran_type: str
                 The type of transaction to look for in the database.

             Returns
             -------
             Transaction
                 A transaction object with only the value and count fields set. In this case, value is the sum of
                 the value of all relevant transactions and the count is the number of relevant transactions.
                 All other fields are set to null or not initialized.

             Raises
             ------
             NoResultsFoundException
                 If no transactions with the given information are found in the database.
              """

    @abstractmethod
    def get_allowed_transaction_types(self) -> List[str]:
        """Queries the database to get a list of the transaction types currently
         available in the database.


        Returns
        -------
        List[str]
            A list of unique transaction types currently present in the database.
         """
